{
    "icon_theme": "Catppuccin Mocha",
    "features": {
        "edit_prediction_provider": "supermaven"
    },
    "exclusions_gitignore": true, // Custom setting see my PR draft: https://github.com/zed-industries/zed/pull/17544
    "outline_panel": {
        "dock": "left"
    },
    "show_edit_predictions": true,
    "theme": "Catppuccin Mocha",
    "assistant": {
        "default_model": {
            "provider": "zed.dev",
            "model": "claude-3-5-sonnet-latest"
        },
        "version": "2"
    },
    "language_models": {
        "kimi_ai": {
            "api_url": "https://api.kimi.ai", // 替换为你的Kimi AI API地址
            "default_model": "your-default-model", // 替换为你的默认模型
            "low_speed_timeout_in_seconds": 30, // 设置低速超时时间
            "available_models": [
                {
                    "name": "model1",
                    "max_tokens": 1024,
                    "max_output_tokens": 512
                }
                // {
                //   "name": "model2",
                //   "max_tokens": 2048,
                //   "max_output_tokens": 1024
                // }
            ]
        }
    },
    "git": {
        // 启用 Git 集成功能
        "enabled": true,
        // 定期从远程仓库获取最新的更改
        "autoFetch": false,
        // 设置自动获取的时间间隔为 300 秒（5分钟）
        // "autoFetchInterval": 300,
        // 当编辑器窗口获得焦点时自动获取最新的 Git 更改
        "autoFetchOnFocus": false,
        // 当编辑器窗口切换时自动获取最新的 Git 更改
        "autoFetchOnWindowChange": false,
        // 在构建项目时自动获取最新的 Git 更改
        "autoFetchOnBuild": true,
        // 在编辑器中显示文件的 Git 状态
        "git_status": true,
        // 在指定的构建事件（如构建、运行、调试）时自动获取最新的Git更改
        "autoFetchOnBuildEvents": ["build", "run", "debug"],
        // 设置在构建事件发生后延迟 1500 毫秒（1.5秒）再进行自动获取
        "autoFetchOnBuildEventsDelay": 1500,
        // 设置在构建后延迟 1500 毫秒（1.5秒）再进行自动获取
        "autoFetchOnBuildDelay": 1500,
        // 在编辑器的行号栏（gutter）中显示 Git 状态，仅显示已跟踪文件的状态
        "git_gutter": "tracked_files",
        // ，在代码行旁边显示最后一次修改该行的提交信息
        "inline_blame": {
            "enabled": false,
            "position": "right"
        }
    },
    // "auto_update_extensions": {
    //   "catppuccin": false
    // },
    "tab_bar": {
        "show": true,
        "show_nav_history_buttons": false
    },
    "tabs": {
        "git_status": true,
        "file_icons": true
    },
    "terminal": {
        // "dock": "bottom",
        "default_height": 250,
        // "button": true,
        "copy_on_select": true,
        "blinking": "on"
    },
    "tab_size": 4,
    "languages": {
        "Shell Script": {
            "show_edit_predictions": true
        },
        "TSX": {
            "show_edit_predictions": true
        },
        "Java": {
            "show_edit_predictions": false
        },
        "Python": {
            "show_edit_predictions": true,
            "language_servers": ["ruff", "pyright"],
            "format_on_save": "on",
            "formatter": [
                {
                    "language_server": {
                        "name": "ruff"
                    }
                },
                {
                    "code_actions": {
                        "source.fixAll.ruff": true,
                        "source.organizeImports.ruff": true
                    }
                }
            ]
        },
        "Markdown": {
            "soft_wrap": "editor_width"
        },
        "Go": {
            "show_edit_predictions": false
        },
        "TypeScript": {
            "show_edit_predictions": true,
            "tab_size": 4
        },
        "Rust": {
            "show_edit_predictions": true
        },
        "C": {
            "show_edit_predictions": true,
            "formatter": {
                "external": {
                    "command": "bash",
                    "arguments": ["-c", "clang-format"]
                }
            },
            "format_on_save": "off"
        },
        "C++": {
            "show_edit_predictions": true,
            "formatter": {
                "external": {
                    "command": "clang-format",
                    "arguments": [
                        "-style={BasedOnStyle: Google, IndentWidth: 2}"
                    ]
                }
            },
            "tab_size": 4,
            "format_on_save": "off"
        }
    },
    "vim_mode": false,
    "base_keymap": "VSCode",
    "ui_font_family": "Noto Sans",
    "buffer_font_family": "Maple Mono SC NF",
    "telemetry": {
        "diagnostics": false,
        "metrics": false
    },
    "ui_font_size": 15,
    "buffer_font_size": 14,
    "scrollbar": {
        "show": "auto"
    },
    "format_on_save": "on",
    "file_scan_exclusions": [".git", ".next", ".turbo", "node_modules", "dist"],
    "project_panel": {
        "scrollbar": {
            "show": "auto"
        }
    },
    "soft_wrap": "editor_width",
    "lsp": {
        "clangd": {
            "arguments": ["-background-index", "-compile-commands-dir=build"],
            "binary": {
                "path": "/usr/bin/clangd",
                "arguments": ["--function-arg-placeholders=1"]
            },
            "initialization_options": {
                "fallbackFlags": ["-std=c++23"]
            }
        },
        "rust-analyzer": {
            "initialization_options": {
                "completion": {
                    "snippets": {
                        "custom": {
                            "Arc::new": {
                                "postfix": "arc",
                                "body": ["Arc::new(${receiver})"],
                                "requires": "std::sync::Arc",
                                "scope": "expr"
                            },
                            "Some": {
                                "postfix": "some",
                                "body": ["Some(${receiver})"],
                                "scope": "expr"
                            },
                            "Ok": {
                                "postfix": "ok",
                                "body": ["Ok(${receiver})"],
                                "scope": "expr"
                            },
                            "Rc::new": {
                                "postfix": "rc",
                                "body": ["Rc::new(${receiver})"],
                                "requires": "std::rc::Rc",
                                "scope": "expr"
                            },
                            "Box::pin": {
                                "postfix": "boxpin",
                                "body": ["Box::pin(${receiver})"],
                                "requires": "std::boxed::Box",
                                "scope": "expr"
                            },
                            "vec!": {
                                "postfix": "vec",
                                "body": ["vec![${receiver}]"],
                                "description": "vec![]",
                                "scope": "expr"
                            }
                        }
                    }
                }
            }
        },
        "pyright": {
            "settings": {
                "analysis": {
                    "autoSearchPaths": true,
                    "useLibraryCodeForTypes": true,
                    "typeCheckingMode": "strict",
                    "reportUnusedVariable": "warning"
                }
            }
        },
        "ruff": {
            "initialization_options": {
                "settings": {
                    // Ruff server settings goes here
                    "lineLength": 120,
                    "lint": {
                        "extendSelect": [
                            // Recommended rules for Python linting
                            "I", // isort (sorts imports)
                            "ARG", // flake8-unused-arguments detects unused arguments in functions
                            "F841", // Warn about unused variables
                            "E", // Pycodestyle errors (style issues like indentation, whitespace, etc.)
                            "F", // Pyflakes rules (includes F841 for unused variables, and other common Python errors)
                            "W", // Pycodestyle warnings (like line breaks before binary operators)
                            "C90", // Pylint rules for cyclomatic complexity and code structure
                            "N", // PEP8 Naming conventions
                            "B", // Bugbear (detects potential code issues like mutable default arguments)
                            "A" // flake8-builtins (detects misuse of Python built-ins like `list`, `dict`, etc.)
                        ]
                    }
                }
            }
        },
        "texlab": {
            "settings": {
                "texlab": {
                    "build": {
                        // "command": "latexmk",
                        // "args": [
                        //     "-xelatex",
                        //     "-synctex=1",
                        //     "-interaction=nonstopmode",
                        //     "-file-line-error",
                        //     "-pdf",
                        //     "%f"
                        // ],
                        "onSave": true,
                        "forwardSearchAfter": true,
                        "recipe": "tectonic"
                    },
                    "recipes": [
                        // {
                        //     "name": "xelatex-bibtex-xelatex-xelatex-clean",
                        //     "commands": [
                        //         {
                        //             "command": "xelatex",
                        //             "args": [
                        //                 "-synctex=1",
                        //                 "-interaction=nonstopmode",
                        //                 "%f"
                        //             ]
                        //         },
                        //         {
                        //             "command": "bibtex",
                        //             "args": ["%f.aux"]
                        //         },
                        //         {
                        //             "command": "xelatex",
                        //             "args": [
                        //                 "-synctex=1",
                        //                 "-interaction=nonstopmode",
                        //                 "%f"
                        //             ]
                        //         },
                        //         {
                        //             "command": "xelatex",
                        //             "args": [
                        //                 "-synctex=1",
                        //                 "-interaction=nonstopmode",
                        //                 "%f"
                        //             ]
                        //         },
                        //         {
                        //             "command": "latexmk",
                        //             "args": ["-c", "%f"]
                        //         }
                        //     ]
                        // },
                        {
                            "command": "tectonic",
                            "args": [
                                "-X",
                                "compile",
                                "%f",
                                "--synctex",
                                "--keep-logs",
                                "--keep-intermediates"
                            ]
                        }
                    ],
                    "forwardSearch": {
                        "executable": "zathura",
                        "args": [
                            "--synctex-forward",
                            "%l:1:%f",
                            "-x",
                            "zed %%{input}:%%{line}",
                            "%p"
                        ]
                    }
                }
            }
        }
    }
}
